CREATE TYPE "color_theme" AS ENUM (
  'light',
  'dark',
  'system'
);

CREATE TABLE "users" (
  "user_id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "username" VARCHAR(32) UNIQUE NOT NULL,
  "email" VARCHAR(128) UNIQUE NOT NULL,
  "password" VARCHAR(256) NOT NULL,
  "display_name" VARCHAR(32),
  "display_city" VARCHAR(64),
  "display_region" VARCHAR(64),
  "display_country" VARCHAR(64),
  "bio" VARCHAR(256),
  "games_played" INTEGER DEFAULT 0,
  "lifetime_score" INT DEFAULT 0,
  "datetime_created" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "user_configs" (
  "user_id" INTEGER PRIMARY KEY,
  "lifetime_score_visible" BOOLEAN NOT NULL DEFAULT TRUE,
  "friend_requests_enabled" BOOLEAN NOT NULL DEFAULT TRUE,
  "game_chat_enabled" BOOLEAN NOT NULL DEFAULT TRUE,
  "safe_chat_enabled" BOOLEAN NOT NULL DEFAULT FALSE,
  "app_theme" color_theme
);

CREATE TABLE "users_banned" (
  "user_banned_id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INTEGER UNIQUE NOT NULL,
  "email" VARCHAR(128) UNIQUE NOT NULL,
  "reason" VARCHAR(256),
  "datetime_created" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "friends" (
  "user_1_id" INTEGER,
  "user_2_id" INTEGER,
  "datetime_created" TIMESTAMP NOT NULL DEFAULT (now()),
  PRIMARY KEY ("user_1_id", "user_2_id")
);

CREATE TABLE "friend_requests" (
  "from_user_id" INTEGER,
  "to_user_id" INTEGER,
  "datetime_created" TIMESTAMP NOT NULL DEFAULT (now()),
  PRIMARY KEY ("from_user_id", "to_user_id")
);

CREATE TABLE "games" (
  "game_id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "gamemode_id" INTEGER NOT NULL,
  "called_ace" CHAR(2),
  "good_guys_win" BOOLEAN NOT NULL,
  "winning_score" SMALLINT NOT NULL,
  "datetime_created" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "gamemodes" (
  "gamemode_id" SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "gamemode_code" VARCHAR(8) UNIQUE NOT NULL,
  "player_count" SMALLINT NOT NULL,
  "blind_size" SMALLINT,
  "leaster" BOOLEAN
);

CREATE TABLE "players" (
  "user_id" INTEGER,
  "game_id" INTEGER,
  "player_index" SMALLINT NOT NULL,
  "good_guy" BOOLEAN NOT NULL DEFAULT FALSE,
  "picker" BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY ("user_id", "game_id")
);

CREATE TABLE "rounds" (
  "game_id" INTEGER,
  "round_id" SMALLINT GENERATED BY DEFAULT AS IDENTITY,
  "round_index" SMALLINT NOT NULL,
  "winner" INTEGER NOT NULL,
  "points_won" SMALLINT NOT NULL,
  PRIMARY KEY ("game_id", "round_id")
);

CREATE TABLE "turns" (
  "game_id" INTEGER,
  "round_id" SMALLINT,
  "turn_id" SMALLINT GENERATED BY DEFAULT AS IDENTITY,
  "turn_index" SMALLINT NOT NULL,
  "user_id" SMALLINT NOT NULL,
  "card_code" CHAR(2) NOT NULL,
  PRIMARY KEY ("game_id", "round_id", "turn_id")
);

CREATE TABLE "cards" (
  "card_id" SMALLINT PRIMARY KEY,
  "card_code" CHAR(2) UNIQUE NOT NULL,
  "suit" CHAR(1) NOT NULL,
  "power" SMALLINT NOT NULL,
  "points" SMALLINT NOT NULL
);

ALTER TABLE "games" ADD FOREIGN KEY ("gamemode_id") REFERENCES "gamemodes" ("gamemode_id");

ALTER TABLE "games" ADD FOREIGN KEY ("called_ace") REFERENCES "cards" ("card_code");

ALTER TABLE "players" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "players" ADD FOREIGN KEY ("game_id") REFERENCES "games" ("game_id");

ALTER TABLE "friends" ADD FOREIGN KEY ("user_1_id") REFERENCES "users" ("user_id");

ALTER TABLE "friends" ADD FOREIGN KEY ("user_2_id") REFERENCES "users" ("user_id");

ALTER TABLE "friend_requests" ADD FOREIGN KEY ("from_user_id") REFERENCES "users" ("user_id");

ALTER TABLE "friend_requests" ADD FOREIGN KEY ("to_user_id") REFERENCES "users" ("user_id");

ALTER TABLE "users" ADD FOREIGN KEY ("user_id") REFERENCES "user_configs" ("user_id");

ALTER TABLE "rounds" ADD FOREIGN KEY ("game_id") REFERENCES "games" ("game_id");

ALTER TABLE "rounds" ADD FOREIGN KEY ("winner") REFERENCES "users" ("user_id");

ALTER TABLE "turns" ADD FOREIGN KEY ("game_id", "round_id") REFERENCES "rounds" ("game_id", "round_id");

ALTER TABLE "turns" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "turns" ADD FOREIGN KEY ("card_code") REFERENCES "cards" ("card_code");
